const CLICK = "CLICK_default";
const TICK = "TICK_default";

//resource delta prototype
function resDelta(groupID, targetResourceID, coefs, options) {
  this.groupID = groupID;
  this.targetResourceID = targetResourceID;
  this.a = coefs.a ? coefs.a: 0;
  this.b = coefs.b ? coefs.b : 0;
  this.c = coefs.c ? coefs.c : 0;

  this.hidden = options && options.hidden ? options.hidden : false;
  this.chance = options && options.chance ? options.chance : 1;
}

//resource delta functions

function resDeltaGroup(groupID, data, options){
  var group = [];
  for(var i = 0; i < data.length; i++)
  {
    var x = data[i];
    group[i] = new resDelta(groupID, x.rID, {a:(x.a?x.a:0),b:(x.b?x.b:0),c:(x.c?x.c:0)}, options);
  }
  return group
}

function GetResDeltasOfGroup(resDeltas, groupID)
{
  var targetResDeltas = [];
  for(var i = 0; i < resDeltas.length; i++)
  {
    if(resDeltas[i].groupID == groupID)
    {
      targetResDeltas[targetResDeltas.length] = resDeltas[i];
    }
  }
  return targetResDeltas;
}

function canAfford(resource, resDeltas, amount){
 var canAfford = true;
  for (var j = 0; j < resDeltas.length; j++) {
    //each delta needs to be evaluated on it's own, as they target different resources
    var deltaSum = 0;
    for (var levelOffset = 0; levelOffset < amount; levelOffset++) {
      //sum the results of the each upgrade along the way
      deltaSum += EvaluateResourceDelta(resource, resDeltas[j], levelOffset, false);
      //console.log(`a.d. ${name} (${this.level}) ${deltaSum}`);
    }
    //every delta has to leave the target resource's level at a non negative value
    canAfford &= getResource(this.resDeltas[j].targetName).level + deltaSum >= 0;
  }
 return canAfford; 
} 

function processResourceDeltas(origninatingResource, deltas) {
    for (var i = 0; i < deltas.length; i++) {
      processResourceDelta(origninatingResource, deltas[i]);
    }
  }

function processResourceDelta(orignatingResource, resDelta)
{
  var tr = getResource(resDelta.targetResourceID.name);
  if(tr)
  {
    var delta = EvaluateResourceDelta(orignatingResource, resourceDelta, 0, false)
    tr.applyDelta(delta);
  }
}

function EvaluateResourceDelta(orignatingResource, resDelta, levelOffset, ignoreChance){
  var doDelta = resDelta.chance >= 1 || Math.random() <= resDelta.chance;
  if(!doDelta && !ignoreChance) return 0;
  var level = orignatingResource.level + levelOffset;
  var delta = (resDelta.a * (level * level)) + (resDelta.b * level) + resDelta.c;
  return delta;
}
